#include <mpkg/libmpkg.h>

string shellEscape(string data) {
	strReplace(&data, "'", "\\'");
	return data;
}

int main(int argc, char **argv) {

	string filename;
	if (argc>1) filename = argv[1];
	// TODO: create empty tree if no filename provided
	MetaSrcPackage *metapkg = new MetaSrcPackage(filename);

	vector<string> abuild;
	abuild.push_back("# ABUILD generated by spkg2abuild converter from " + getFilename(filename));
	abuild.push_back("");
	// Adding basic metadata
	abuild.push_back("# Package metadata");
	abuild.push_back("pkgname=" + metapkg->data->pkg.get_name());
	abuild.push_back("pkgver=" + metapkg->data->pkg.get_version());
	abuild.push_back("pkgbuild=" + metapkg->data->pkg.get_build());
	string arch = metapkg->data->pkg.get_arch();
	if (arch!="noarch" && arch!="fw") arch="auto";
	abuild.push_back("arch=\"" + arch +"\"");

	// Description
	abuild.push_back("");
	abuild.push_back("# Package description");
	abuild.push_back("shortdesc=(\"" + shellEscape(metapkg->data->pkg.get_short_description()) + "\")");
	abuild.push_back("longdesc=(\"" + shellEscape(metapkg->data->pkg.get_description()) + "\")");

	// Source URL
	abuild.push_back("");
	abuild.push_back("# Source URL");
	string url = shellEscape(metapkg->data->url);
	strReplace(&url, metapkg->data->pkg.get_version(), "${pkgver}");
	abuild.push_back("source=(\"" + url + "\")");

	// Tags
	abuild.push_back("");
	abuild.push_back("# Tags");
	string tags;
	for (size_t i=0; i<metapkg->data->pkg.get_tags().size(); ++i) {
		if (i!=0) tags+=" ";
		tags+=metapkg->data->pkg.get_tags().at(i);
	}
	abuild.push_back("tags=\"" + tags + "\"");

	// Dependencies
	abuild.push_back("");
	abuild.push_back("# Manually-added dependencies");
	string deps;
	for (size_t i=0; i<metapkg->data->pkg.get_dependencies().size(); ++i) {
		if (i!=0) deps+=" ";
		deps+= metapkg->data->pkg.get_dependencies().at(i).getDepInfo();
	}
	abuild.push_back("adddep=\"" + deps + "\"");

	// Build system
	abuild.push_back("");
	abuild.push_back("# Build system");
	if (metapkg->data->buildsystem!="script") {
		string build_keys;
		for (size_t i=0; i<metapkg->data->configure_keys.size(); ++i) {
			if (i!=0) build_keys+=" \\\n";
			build_keys+=metapkg->data->configure_keys[i];
			if (metapkg->data->configure_values.size()>i && !metapkg->data->configure_values[i].empty()) {
				build_keys+="=" + metapkg->data->configure_values[i];
			}
		}
		strReplace(&build_keys, "$LIBSUFFIX", "${LIBDIRSUFFIX}");
		abuild.push_back("BUILD_SYSTEM=\"" + metapkg->data->buildsystem + "\"");
		abuild.push_back("BUILD_KEYS=\"" + shellEscape(build_keys) + "\"");
	}

	// Before-build
	abuild.push_back("");
	abuild.push_back("# Before-build script");
	abuild.push_back("before_build() {");
	abuild.push_back("\techo \"\"");
	string data = metapkg->sp->readPrebuildScript();
	// Replace var names
	strReplace(&data, "$PKG", "${pkgdir}");
	strReplace(&data, "$DATADIR", "${filedir}");
	vector<string> before_build_script = MakeStrings(data);
	for (size_t i=0; i<before_build_script.size(); ++i) {
		abuild.push_back("\t" + before_build_script[i]);
	}
	abuild.push_back("}");

	abuild.push_back("");
	data = metapkg->sp->readBuildScript();
	strReplace(&data, "$PKG", "${pkgdir}");
	strReplace(&data, "$DATADIR", "${filedir}");
	vector<string> after_build_script = MakeStrings(data);
	vector<string> doinst = MakeStrings(metapkg->sp->readPostinstallScript());
	if (metapkg->data->buildsystem=="script") {
		abuild.push_back("# Main build script (used only if build_system=\"script\")");
		abuild.push_back("build() {");
		abuild.push_back("\tcd $srcdir/$pkgname-$pkgver"); // Should be replaced with automatic directory finding
		abuild.push_back("\tburn_patches");
		for (size_t i=0; i<after_build_script.size(); ++i) {
			abuild.push_back("\t" + after_build_script[i]);
		}
		abuild.push_back("}");
		abuild.push_back("");
		abuild.push_back("after_build() {");
		abuild.push_back("\techo \"\"");
		abuild.push_back("}");


	}
	else {
		abuild.push_back("");
		abuild.push_back("after_build() {");
		abuild.push_back("\techo \"\"");
		for (size_t i=0; i<after_build_script.size(); ++i) {
			abuild.push_back("\t" + after_build_script[i]);
		}
		abuild.push_back("}");
	}
	abuild.push_back("");

	

	// Now let's save that stuff in current directory
	WriteFileStrings("ABUILD", abuild);
	// Copy build_data stuff to files
	system("mkdir -p files");

	system("cp -arfv " + metapkg->sp->pkg_dir + "/build_data/* files/ 2>/dev/null");
	// Remove unused and already converted stuff
	unlink("files/build.sh");
	unlink("files/prebuild.sh");
	// Copy patches
	system("mkdir -p patches");
	system("cp -arfv " + metapkg->sp->pkg_dir + "/patches/* patches/ 2>/dev/null");
	delete metapkg;


}
