#include <mpkgsupport/mpkgsupport.h>
#include <cstdio>
#include <string>
#include <vector>


#include <my_global.h>
#include <mysql.h>
using namespace std;
string getDepConditionBack(int db_in) {
	switch(db_in) {
		case 1: return "more";
		case 2: return "less";
		case 3: return "equal";
		case 4: return "notequal";
		case 5: return "atleast";
		case 6: return "notmore";
		case 7: return "any";
	}
	return "";
}
void report_failure(int line) {
	fprintf(stderr, "EPIC FAIL at line %d\n", line);
	abort();
}
string getFancyDistro(string srv, string darch, string dver) {
	if (srv=="core" || srv=="userland" || srv=="testing") return srv + "-" + darch;
	else if (srv=="deprecated/core" || srv=="deprecated/userland" || srv=="deprecated/testing") return srv + "-" + darch + " (deprecated)";
	else return darch;
}

void generateIndex2(MYSQL &conn, string srv, string darch, string dver, bool global=false) {
	string fancydistro;
	if (!global) fancydistro = getFancyDistro(srv, darch, dver);
	
	printf("Checking out package list...\n");
	MYSQL_RES *packages;
	int res;
	if (!global) res = mysql_query(&conn, string("SELECT packages.*, locations.location_path FROM packages, locations WHERE packages.package_id=locations.packages_package_id AND locations.server_url='" + srv + "' AND locations.distro_arch='" + darch + "' AND locations.distro_version='" + dver + "' GROUP BY packages.package_id").c_str());
	else res = mysql_query(&conn, "SELECT packages.*, locations.location_path, locations.distro_arch, locations.distro_version, locations.server_url FROM packages, locations WHERE packages.package_id=locations.packages_package_id GROUP BY packages.package_id");

	if (res) report_failure(__LINE__);

	printf("Count: %d\n", mysql_field_count(&conn));
	packages = mysql_store_result(&conn);

	printf("Checking out ABUILD list...\n");
	MYSQL_RES *abuilds;
	res = mysql_query(&conn, "SELECT package_id, filename FROM abuilds;");
	if (res) report_failure(__LINE__);

	abuilds = mysql_store_result(&conn);
	printf("%s %s %s - found %d packages\n", srv.c_str(), darch.c_str(), dver.c_str(), mysql_num_rows(packages));
	
	FILE *xml;
       	if (!global) xml = fopen(string(srv + "/" + darch + "/" + dver + "/repository/packages.xml").c_str(), "w");
	else xml = fopen("global_repository/packages.xml", "w");
	if (!xml) abort();
	FILE *package_list;
       	if (!global) package_list = fopen(string(srv + "/" + darch + "/" + dver + "/repository/package_list").c_str(), "w");
	else package_list = fopen("global_repository/package_list", "w");
	if (!package_list) abort();

	fprintf(xml, "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<repository>\n");
	fprintf(package_list, "# Package list, generated by server\n");

	printf("Generating XML...\n");
	MYSQL_ROW row, drow, abuild, trow, crow, coptrow;
	MYSQL_RES *deps, *tags, *confs, *coptres;

	string attr;

	while (row = mysql_fetch_row(packages)) {
		if (global) fancydistro = getFancyDistro(row[30], row[28], row[29]);
		fprintf(package_list, row[1]);
		fprintf(xml, "<package>\n");
		fprintf(xml, "\t<name>%s</name>\n", row[1]);
		fprintf(xml, "\t<version>%s</version>\n", row[2]);
		fprintf(xml, "\t<arch>%s</arch>\n", row[3]);
		fprintf(xml, "\t<build>%s</build>\n", row[4]);

		if (row[25] && cutSpaces(row[25])!="") fprintf(xml, "\t<provides>%s</provides>\n", cutSpaces(row[25]).c_str());
		if (row[26] && cutSpaces(row[26])!="") fprintf(xml, "\t<conflicts>%s</conflicts>\n", cutSpaces(row[26]).c_str());

		fprintf(xml, "\t<compressed_size>%s</compressed_size>\n", row[5]);
		fprintf(xml, "\t<installed_size>%s</installed_size>\n", row[6]);
		fprintf(xml, "\t<short_description><![CDATA[%s]]></short_description>\n", row[7]);
		fprintf(xml, "\t<description><![CDATA[%s]]></description>\n", row[8]);
		if (row[9] && cutSpaces(row[9])!="") fprintf(xml, "\t<changelog><![CDATA[%s]]></changelog>\n", row[9]);
		fprintf(xml, "\t<md5>%s</md5>\n", row[15]);
		fprintf(xml, "\t<maintainer>\n");
		fprintf(xml, "\t\t<name>%s</name>\n", row[10]);
		fprintf(xml, "\t\t<email>%s</email>\n", row[11]);
		fprintf(xml, "\t</maintainer>\n");
		
		if (!global) fprintf(xml, "\t<location>%s</location>\n", row[27]);
		else fprintf(xml, "\t<location>%s/%s/%s/repository/%s</location>\n", row[30], row[28], row[29], row[27]);
		fprintf(xml, "\t<filename>%s</filename>\n", row[16]);
		
		// Deps... :)
		res = mysql_query(&conn, string("SELECT dependency_package_name, dependency_condition, dependency_package_version FROM dependencies WHERE packages_package_id='" + string(row[0]) + "'").c_str());
		if (res) report_failure(__LINE__);
		deps = mysql_store_result(&conn);
		if (mysql_num_rows(deps)>0) {
			fprintf(xml, "\t<dependencies>\n");
			while(drow = mysql_fetch_row(deps)) {
				fprintf(xml, "\t\t<dep>\n");
				fprintf(xml, "\t\t\t<name>%s</name>\n", drow[0]);
				fprintf(xml, "\t\t\t<condition>%s</condition>\n", getDepConditionBack(atoi(drow[1])).c_str());
				fprintf(xml, "\t\t\t<version>%s</version>\n", drow[2]);
				fprintf(xml, "\t\t</dep>\n");
			}
			fprintf(xml, "\t</dependencies>\n");

		}
		mysql_free_result(deps);
		// Config files
		mysql_query(&conn, string("SELECT config_files.id, config_files.filename FROM config_files WHERE package_id='" + string(row[0]) + "'").c_str());
		confs = mysql_store_result(&conn);
		if (mysql_num_rows(confs)>0) {
			fprintf(xml, "\t<config_files>\n");
			while (crow = mysql_fetch_row(confs)) {
				attr.clear();
				mysql_query(&conn, string("SELECT name, value FROM config_options WHERE config_files_id='" + string(crow[0]) + "';").c_str());
				coptres = mysql_store_result(&conn);
				if (mysql_num_rows(coptres)>0) {
					while(coptrow = mysql_fetch_row(coptres)) {
						attr += " " + string(coptrow[0]) + "=\"" + string(coptrow[1]) + "\"";
					}
				}
				mysql_free_result(coptres);

				fprintf(xml, "\t\t<conf_file%s>%s</conf_file>\n", attr.c_str(), crow[1]);
			}
			fprintf(xml, "\t</config_files>\n");
		}
		mysql_free_result(confs);

		// Tags
		res = mysql_query(&conn, string("SELECT tags_name FROM tags,tags_links WHERE tags.tags_id=tags_links.tags_tag_id AND tags_links.packages_package_id='" + string(row[0]) + "'").c_str());
		if (res) report_failure(__LINE__);
		tags = mysql_store_result(&conn);
		if (tags && mysql_num_rows(tags)>0) {
			fprintf(xml, "\t<tags>\n");
			while (trow=mysql_fetch_row(tags)) {
				fprintf(xml, "\t\t<tag>%s</tag>\n", trow[0]);
			}
			fprintf(xml, "\t</tags>\n");
		}
		mysql_free_result(tags);
		fprintf(xml, "\t<repository_tags>%s</repository_tags>\n", row[22]);
		fprintf(xml, "\t<distro_version>%s</distro_version>\n", fancydistro.c_str());
		
		// ABUILD, if exist
		mysql_data_seek(abuilds, 0);
		while (abuild = mysql_fetch_row(abuilds)) {
			if (atoi(abuild[0])!=atoi(row[0])) continue;
			if (!global) fprintf(xml, "\t<abuild>%s</abuild>\n", abuild[1]);
			else fprintf(xml, "\t<abuild>%s/%s/%s/repository/%s</abuild>\n", row[30], row[28], row[29], abuild[1]);
			break;
		}
		fprintf(xml, "</package>\n\n");
	}
	mysql_free_result(packages);
	mysql_free_result(abuilds);

	fprintf(xml, "</repository>\n");
	fclose(xml);
	fclose(package_list);


 	if (!global) {
		unlink(string(srv + "/" + darch + "/" + dver + "/repository/packages.xml.gz").c_str());
		system("gzip -9 " + srv + "/" + darch + "/" + dver + "/repository/packages.xml");
	}
	else {
		unlink(string("global_repository/packages.xml.gz").c_str());
		system("gzip -9 global_repository/packages.xml");
	}

	
	// Also, we need setup variants index here
	if (!global) {
		FILE *setup_variants;
		setup_variants=fopen(string(srv + "/" + darch + "/" + dver + "/repository/setup_variants.list").c_str(), "w");
		if (!setup_variants) abort();
		if (FileExists(srv + "/" + darch + "/" + dver + "/repository/setup_variants")) {
			vector<string> svar_raw = getDirectoryList(srv + "/" + darch + "/" + dver + "/repository/setup_variants");
			if (svar_raw.size()>0) {
				for (size_t i=0; i<svar_raw.size(); ++i) {
					if (svar_raw[i].find(".desc")==svar_raw[i].size()-strlen(".desc")) {
						fprintf(setup_variants, "%s\n", svar_raw[i].substr(0, svar_raw[i].size()-strlen(".desc")).c_str());
					}
				}
			}
		}
		fclose(setup_variants);
	}


	printf("Section finished.\n");
	
}
int main(int argc, char **argv) {
	MYSQL conn;
	if (!mysql_init(&conn)) {
		fprintf(stderr, "Omg, failed to init MYSQL\n");
		exit(1);
	}
	vector<string> db_config = ReadFileStrings("db.conf");
	if (db_config.size()<4) {
		fprintf(stderr, "Invalid configuration file. Should be:\nhostname\nusername\npassword\ndbname\n");
		exit(3);
	}
	if(!mysql_real_connect(&conn, db_config[0].c_str(), db_config[1].c_str(), db_config[2].c_str(), db_config[3].c_str(), 0, NULL, 0)) {
		fprintf(stderr, "Omg, failed to connect\n");
		exit(2);

	}
	
	
	
	MYSQL_RES *available_repos;
       	int res = mysql_query(&conn, "SELECT server_url, distro_arch, distro_version FROM locations GROUP BY server_url, distro_arch");
	if (res) report_failure(__LINE__);
	available_repos = mysql_store_result(&conn);
	int repocount = mysql_num_rows(available_repos);
	printf("Total repos: %d\n", repocount);

	MYSQL_ROW row;
	while (row = mysql_fetch_row(available_repos)) {
		printf("Generating index for %s/%s/%s\n", row[0], row[1], row[2]);
		generateIndex2(conn, row[0], row[1], row[2]);
	}
	// Global index
	printf("Generating global index\n");
	generateIndex2(conn, "", "", "", true);
	printf("Finished\n");
}

