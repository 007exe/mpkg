.TH mpkg-build 0.16 "Ноябрь 2010"
.SH ИМЯ
mpkg-build
.SH СИНТАКСИС
.B mpkg-build 
[
.B -w --no_buildcache
]
[
.B -N --nodepgen
]
[
.B -t --conf=ИМЯ_КОНФИГА
]
[
.B -s --keep-symlinks
]
.I build
[
.B march=CPU
]
[
.B mtune=CPU
]
[
.B olevel={O0|O1|O2|O3}
]
.I ИМЯ_ФАЙЛА
.SH ОПИСАНИЕ
Сборка пакета на основе spkg. На выходе пакет попадает в /var/mpkg/packages/ (её можно переопределить, параметр 
package_output в конфигурационном файле). По умолчанию, по окончании сборки для пакета генерируются зависимости. 
.SH КЛЮЧИ
.TP
.B -w --no_buildcache
Не использовать кеш исходников
.TP
.B -N --nodepgen
Не генерировать зависимости по окончании сборки
.TP
.B -t --conf=ИМЯ_КОНФИГА
Использовать альтернативный конфигурационный файл.
.TP
.B -s --keep-symlinks
Оставлять симлинки внутри архива, не выносить их в 
.B doinst.sh.
.TP
Кроме того, должны работать все ключи, относящиеся к mpkg gendeps2
.SH ОПЦИИ
.TP
.B march=CPU
Задает архитектуру процессора для текущей сборки, например: i686. Множество допустимых значений зависит от gcc, 
данный аргумент передается ему в виде ключа 
.B -march.
Значение по умолчанию берется из конфигурационного файла.
.TP
.B  mtune=CPU
Задает ключ 
.B -mtune
для gcc на время текущей сборки, всё остальное аналогично march.
.TP
.B olevel={ O0 | O1 | O2 | O3 }
Уровень оптимизации на время текущей сборки. Возможные значения: O0 (без оптимизации), O1 (минимальная оптимизация), 
O2 (стандартная оптимизация), O3 (максимальная оптимизация), Os (то же что O2, но стараться минимизировать размер 
бинарников). По умолчанию используется значение из конфигурационного файла. Вариант O3 лучше не использовать: он 
небезопасен для некоторых программ, и зачастую генерирует код хуже чем O2. Именно O2 рекомендуется для всех случаев 
(если только вам не требуется собрать как можно быстрее, например чтобы проверить работоспособность).
.SH ПРИМЕР
.TP 
.B mpkg-build -w --nodepgen march=i486 mtune=i486 mpkg-core-0.13.9999-svnDATE-REVISION.spkg
Собрать пакет mpkg-core без генерации зависимостей при окончании сборки для i486 архитектуры процессора, не используя 
кеш для исходных файлов.

